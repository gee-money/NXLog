#define ROOT C:\Program Files\nxlog
define ROOT C:\Program Files (x86)\nxlog

Moduledir %ROOT%\modules
CacheDir %ROOT%\data
Pidfile %ROOT%\data\nxlog.pid
SpoolDir %ROOT%\data
LogFile %ROOT%\data\nxlog.log
define CertDir C:\Program Files (x86)\nxlog\cert

#Define the modules that will be used by nxlog.

<Extension json>
    Module xm_json
</Extension>

<Extension _syslog>
    Module  xm_syslog
</Extension>

<Extension kvp>
	Module xm_kvp
	KVPDelimiter ,
	KVDelimiter =
#	EscapeChar \\
#	ValueQuoteChar "
</Extension>

<Extension cef_extension>
	Module xm_kvp
	KVPDelimiter ' '
	KVDelimiter =
	EscapeChar \\
	#ValueQuoteChar "
	QuoteMethod None
</Extension>

<Extension cef_header>
    Module      xm_csv
    Fields      $type, $cef, $vendor, $connector, $version, $threat_type, $alert_title, $severity, $humanreadablemessage
    FieldTypes  string, string, string, string, string, string, string, string, string, 
    Delimiter   |
	QuoteMethod	None
</Extension>

<Input in_cbdefense>
	Module  im_udp
	#Enter in the IP address of the sending host 
	Host	 0.0.0.0
	#Enter in the port that you are using to send logs to nxlog
	Port	 514
	<Exec>
		#If the log does not contain the word 'CEF:' then drop the log.
		if $raw_event !~ /(CEF:.*)/ drop();
		else
		{
			#Read in the log lines and begin parsing them
			parse_syslog(); 
			cef_header->parse_csv($Message);
			#Delete all the extra fields
			delete($MessageSourceAddress);
			delete($type); delete($cef); delete($connector);
			delete($version); delete($severity);
			delete($SourceModuleName); delete($SourceModuleType); delete($SyslogFacilityValue);
			delete($SyslogFacility);delete($SyslogSeverity);
			delete($SyslogSeverityValue); delete($SeverityValue);
			delete($Severity); delete($threat_type);
			#Parse out the fields in the CEF extension
			$_Extension = $humanreadablemessage;
			cef_extension->parse_kvp($_Extension);
			#Delete more fields that are not required for UEF
			delete($Message); delete($humanreadablemessage);
			delete($cs3Label); delete($cs4Label); delete($act);
			delete($EventReceivedTime); delete($Hostname); delete($vendor);
			delete($cs3); delete($cs4); delete($dvc);
			#Convert the rt field, which is the timestamp of the log, into ISO 8601 extended format
			delete($EventTime);
			if not defined($rt) $rt = now();
			$rt = parsedate($rt);
			$rt = strftime($rt, '%Y-%m-%dT%H:%M:%SZ');
			#Rename fields to UEF
			rename_field('rt', 'time');
			rename_field('sntdom', 'account_domain');
			rename_field('dvchost', 'source_address');
			rename_field('duser', 'account');
			#This field cannot be used with this version of UEF
			#rename_field('dvc', 'client_ip');
			#Add UEF fields
			$version = "v1";
			$event_type = "VIRUS_ALERT";
			$raw_event = $raw_event + "version=" + $version + ";" + "event_type=" + $event_type + ";";
			#Transform everything to key-value pair.
			kvp->to_kvp();
			#Convert to json format
			to_json();
		}
	</Exec>
 </Input>

<Output out_cbdefense>
    Module      om_udp
	#This is the IP address of the InsightIDR Collector
    Host        192.168.0.156
	#This is the port configured on the Universal Event Source
    Port        10060
</Output>
 
<Route 1>
   Path        in_cbdefense=>out_cbdefense
</Route>
